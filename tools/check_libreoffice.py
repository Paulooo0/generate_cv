#!/usr/bin/env python3
"""
Script espec√≠fico para verificar a instala√ß√£o do LibreOffice no Windows.
"""

import os
import platform
import shutil
import glob
import subprocess


def check_system():
    """Verifica se estamos no Windows."""
    system = platform.system().lower()
    if system != "windows":
        print(f"‚ùå Este script √© espec√≠fico para Windows. Sistema atual: {system}")
        return False
    print(f"‚úÖ Sistema Windows detectado: {platform.system()} {platform.release()}")
    return True


def check_path():
    """Verifica se soffice est√° no PATH do sistema."""
    print("\nüîç Verificando se 'soffice' est√° no PATH...")
    
    soffice_path = shutil.which("soffice")
    if soffice_path:
        print(f"‚úÖ LibreOffice encontrado no PATH: {soffice_path}")
        return soffice_path
    else:
        print("‚ùå LibreOffice n√£o encontrado no PATH")
        return None


def check_common_paths():
    """Verifica caminhos comuns de instala√ß√£o do LibreOffice."""
    print("\nüìÅ Verificando caminhos comuns de instala√ß√£o...")
    
    common_paths = [
        r"C:\Program Files\LibreOffice\program\soffice.exe",
        r"C:\Program Files (x86)\LibreOffice\program\soffice.exe",
        r"C:\Program Files\LibreOffice*\program\soffice.exe",
        r"C:\Program Files (x86)\LibreOffice*\program\soffice.exe"
    ]
    
    found_paths = []
    
    for path in common_paths:
        if "*" in path:
            # Usar glob para vers√µes com n√∫meros
            matches = glob.glob(path)
            for match in matches:
                if os.path.exists(match):
                    found_paths.append(match)
                    print(f"‚úÖ Encontrado: {match}")
        else:
            if os.path.exists(path):
                found_paths.append(path)
                print(f"‚úÖ Encontrado: {path}")
    
    if not found_paths:
        print("‚ùå LibreOffice n√£o encontrado nos caminhos comuns")
    
    return found_paths


def check_registry():
    """Verifica o registro do Windows para LibreOffice."""
    print("\nüîß Verificando registro do Windows...")
    
    try:
        import winreg
        
        registry_paths = [
            r"SOFTWARE\LibreOffice\LibreOffice\*\Path",
            r"SOFTWARE\WOW6432Node\LibreOffice\LibreOffice\*\Path"
        ]
        
        found_in_registry = []
        
        for reg_path in registry_paths:
            try:
                # Tentar abrir a chave do registro
                key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, reg_path.replace(r"\*\Path", ""))
                print(f"‚úÖ Chave do registro encontrada: {reg_path}")
                found_in_registry.append(reg_path)
                winreg.CloseKey(key)
            except FileNotFoundError:
                print(f"‚ùå Chave n√£o encontrada: {reg_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao acessar registro: {e}")
        
        return found_in_registry
        
    except ImportError:
        print("‚ö†Ô∏è M√≥dulo winreg n√£o dispon√≠vel (pode n√£o ser Windows)")
        return []


def test_soffice_execution():
    """Testa se o soffice pode ser executado."""
    print("\n‚ñ∂Ô∏è Testando execu√ß√£o do soffice...")
    
    # Primeiro, tentar encontrar o soffice
    soffice_path = shutil.which("soffice")
    if not soffice_path:
        # Tentar caminhos comuns
        common_paths = [
            r"C:\Program Files\LibreOffice\program\soffice.exe",
            r"C:\Program Files (x86)\LibreOffice\program\soffice.exe"
        ]
        for path in common_paths:
            if os.path.exists(path):
                soffice_path = path
                break
    
    if not soffice_path:
        print("‚ùå N√£o foi poss√≠vel encontrar o soffice para teste")
        return False
    
    try:
        # Testar com --version (comando seguro)
        result = subprocess.run(
            [soffice_path, "--version"],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            print(f"‚úÖ LibreOffice executado com sucesso!")
            print(f"   Vers√£o: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå Erro ao executar LibreOffice: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout ao executar LibreOffice")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao executar LibreOffice: {e}")
        return False


def add_to_path(libreoffice_path):
    """
    Adiciona o LibreOffice ao PATH do sistema Windows.
    Requer privil√©gios de administrador.
    """
    print(f"\nüîß Tentando adicionar ao PATH: {libreoffice_path}")
    
    try:
        import winreg
        
        # Extrair o diret√≥rio do programa (remover soffice.exe)
        program_dir = os.path.dirname(libreoffice_path)
        
        # Abrir a chave do registro para PATH do sistema
        key = winreg.OpenKey(
            winreg.HKEY_LOCAL_MACHINE,
            r"SYSTEM\CurrentControlSet\Control\Session Manager\Environment",
            0,
            winreg.KEY_READ | winreg.KEY_WRITE
        )
        
        # Ler o PATH atual
        current_path, _ = winreg.QueryValueEx(key, "Path")
        
        # Verificar se j√° est√° no PATH
        if program_dir in current_path:
            print("‚úÖ LibreOffice j√° est√° no PATH do sistema")
            winreg.CloseKey(key)
            return True
        
        # Adicionar ao PATH
        new_path = current_path + ";" + program_dir
        
        # Escrever o novo PATH
        winreg.SetValueEx(key, "Path", 0, winreg.REG_EXPAND_SZ, new_path)
        winreg.CloseKey(key)
        
        print("‚úÖ LibreOffice adicionado ao PATH do sistema com sucesso!")
        print("üîÑ Reinicie o prompt de comando para que as mudan√ßas tenham efeito.")
        
        return True
        
    except PermissionError:
        print("‚ùå Erro de permiss√£o. Execute o script como administrador.")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao modificar PATH: {e}")
        return False


def add_to_user_path(libreoffice_path):
    """
    Adiciona o LibreOffice ao PATH do usu√°rio (n√£o requer admin).
    """
    print(f"\nüîß Tentando adicionar ao PATH do usu√°rio: {libreoffice_path}")
    
    try:
        import winreg
        
        # Extrair o diret√≥rio do programa
        program_dir = os.path.dirname(libreoffice_path)
        
        # Abrir a chave do registro para PATH do usu√°rio
        key = winreg.OpenKey(
            winreg.HKEY_CURRENT_USER,
            r"Environment",
            0,
            winreg.KEY_READ | winreg.KEY_WRITE
        )
        
        # Ler o PATH atual do usu√°rio
        try:
            current_path, _ = winreg.QueryValueEx(key, "Path")
        except FileNotFoundError:
            current_path = ""
        
        # Verificar se j√° est√° no PATH
        if program_dir in current_path:
            print("‚úÖ LibreOffice j√° est√° no PATH do usu√°rio")
            winreg.CloseKey(key)
            return True
        
        # Adicionar ao PATH
        if current_path:
            new_path = current_path + ";" + program_dir
        else:
            new_path = program_dir
        
        # Escrever o novo PATH
        winreg.SetValueEx(key, "Path", 0, winreg.REG_EXPAND_SZ, new_path)
        winreg.CloseKey(key)
        
        print("‚úÖ LibreOffice adicionado ao PATH do usu√°rio com sucesso!")
        print("üîÑ Reinicie o prompt de comando para que as mudan√ßas tenham efeito.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao modificar PATH do usu√°rio: {e}")
        return False


def check_installation_methods():
    """Verifica m√©todos de instala√ß√£o dispon√≠veis."""
    print("\nüì¶ Verificando m√©todos de instala√ß√£o...")
    
    # Verificar winget
    winget_available = shutil.which("winget")
    if winget_available:
        print("‚úÖ winget dispon√≠vel - pode instalar via: winget install TheDocumentFoundation.LibreOffice")
    else:
        print("‚ùå winget n√£o dispon√≠vel")
    
    # Verificar chocolatey
    choco_available = shutil.which("choco")
    if choco_available:
        print("‚úÖ Chocolatey dispon√≠vel - pode instalar via: choco install libreoffice")
    else:
        print("‚ùå Chocolatey n√£o dispon√≠vel")
    
    # Verificar scoop
    scoop_available = shutil.which("scoop")
    if scoop_available:
        print("‚úÖ Scoop dispon√≠vel - pode instalar via: scoop install libreoffice")
    else:
        print("‚ùå Scoop n√£o dispon√≠vel")


def main():
    """Executa todas as verifica√ß√µes."""
    print("üîç VERIFICA√á√ÉO DO LIBREOFFICE NO WINDOWS")
    print("=" * 50)
    
    if not check_system():
        return
    
    results = {
        'path': check_path(),
        'common_paths': check_common_paths(),
        'registry': check_registry(),
        'execution': test_soffice_execution()
    }
    
    print("\nüìä RESUMO DA VERIFICA√á√ÉO")
    print("=" * 30)
    
    if results['path'] or results['common_paths']:
        print("‚úÖ LibreOffice est√° instalado no sistema")
        if results['execution']:
            print("‚úÖ LibreOffice pode ser executado corretamente")
        else:
            print("‚ö†Ô∏è LibreOffice instalado mas pode ter problemas de execu√ß√£o")
    else:
        print("‚ùå LibreOffice n√£o est√° instalado")
        print("\nüí° COMO INSTALAR:")
        print("1. Baixe em: https://www.libreoffice.org/download/download/")
        print("2. Ou use winget: winget install TheDocumentFoundation.LibreOffice")
        print("3. Ou use Chocolatey: choco install libreoffice")
    
    check_installation_methods()
    
    print("\nüéØ RECOMENDA√á√ïES:")
    if not results['path'] and results['common_paths']:
        print("‚Ä¢ Adicione o LibreOffice ao PATH do sistema")
        print("‚Ä¢ Ou use o caminho completo nos scripts")
        
        # Oferecer para adicionar ao PATH automaticamente
        print("\nüîß OP√á√ÉO: Adicionar LibreOffice ao PATH automaticamente")
        print("1. PATH do sistema (requer admin)")
        print("2. PATH do usu√°rio (n√£o requer admin)")
        print("3. N√£o adicionar")
        
        try:
            choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()
            
            if choice == "1":
                # Tentar adicionar ao PATH do sistema
                if results['common_paths']:
                    add_to_path(results['common_paths'][0])
                else:
                    print("‚ùå N√£o foi poss√≠vel encontrar o caminho do LibreOffice")
                    
            elif choice == "2":
                # Adicionar ao PATH do usu√°rio
                if results['common_paths']:
                    add_to_user_path(results['common_paths'][0])
                else:
                    print("‚ùå N√£o foi poss√≠vel encontrar o caminho do LibreOffice")
                    
            elif choice == "3":
                print("‚úÖ Opera√ß√£o cancelada")
                
            else:
                print("‚ùå Op√ß√£o inv√°lida")
                
        except KeyboardInterrupt:
            print("\n‚úÖ Opera√ß√£o cancelada pelo usu√°rio")
            
    elif not results['path'] and not results['common_paths']:
        print("‚Ä¢ Instale o LibreOffice primeiro")
        print("‚Ä¢ Certifique-se de que est√° no PATH")


if __name__ == "__main__":
    main()
